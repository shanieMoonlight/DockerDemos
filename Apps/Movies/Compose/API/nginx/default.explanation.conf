
//places to forward to
upstream nginxForwardLocationName {
    server containerName:containerPort;
}
upstream nginxForwardLocationName2{
    server containerName2:containerPort2;
}



server {

    listen OutsidePort;


     location /startsWithForwardLocationIdentifier {
        // Change the path before it gets there. Keep everything after the '/api/' and append it to the proxy_pass url
        // 'break' means stop processing further rewrite directives in this location block (Prevent loops)
        rewrite /startsWithForwardLocationIdentifier/(.*) /$1 break;  
        proxy_pass http://nginxForwardLocationName;
    }

    location /startsWithForwardLocationIdentifier2 {
        proxy_pass http://nginxForwardLocationName2;
    }    
    
}




GitHub Copilot
Short answer — what the API actually receives when a browser on my-fancy-website.com requests http://my-fancy-website.com/api/Movies/3 through your nginx:
•	Request line: GET /api/Movies/3 HTTP/1.1
(nginx forwards the original URI because you use proxy_pass http://api; and you removed the rewrite)
•	Host header: Host: my-fancy-website.com
(you set proxy_set_header Host $host; so the backend sees the original host the client used)
•	Origin header: preserved from the browser (e.g. Origin: http://my-fancy-website.com) — browsers include Origin for cross-origin requests; same-origin requests may not include it. nginx does not remove or change it by default.
•	Client IP headers:
•	X-Real-IP: <client-ip> (value of $remote_addr)
•	X-Forwarded-For: <existing-chain>, <client-ip> (you append via $proxy_add_x_forwarded_for)
•	Protocol indicator: X-Forwarded-Proto: http or https (depending on client→nginx scheme)
•	Connection details: nginx will use HTTP/1.1 to contact the API (proxy_http_version 1.1) and will stream upstream responses (proxy_buffering off).
CORS implication (concise)
•	CORS checks are based on the browser-sent Origin header. The API must include that exact origin (scheme + host + port) in its allowed-origins list for preflights / browser-enforced CORS to succeed.
•	If your client and nginx share the same origin (same host + scheme + port), the browser may treat it as same-origin and not send Origin, so CORS does not apply.
•	Make sure the values in WithOrigins(...) match the browser Origin values (e.g. https://my-fancy-website.com).
Practical note
•	To log/trust forwarded headers correctly in ASP.NET Core, enable the Forwarded Headers middleware (UseForwardedHeaders) and/or read X-Forwarded-For to obtain the original client IP.