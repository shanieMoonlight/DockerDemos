name: Movies - Docker Image CI

on:
  push:
    branches: [ "master" ]
    paths:
      - 'Apps/Movies/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'Apps/Movies/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
  

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Restore solution
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test Movies.Tests/Movies.Tests.csproj --configuration Release --no-build --logger "trx;LogFileName=test_results.trx"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: movies-test-results-${{ github.run_id }}
        path: Movies.Tests/TestResults/**/*.trx


    # - name: Calculate Tags
    #   id: tags
    #   run: |
    #     SHORT_SHA=${GITHUB_SHA::7}
    #     TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)
    #     TAG_LIST=(
    #       "shaneyboy/movies-api:latest"
    #       "shaneyboy/movies-api:${SHORT_SHA}"
    #       "shaneyboy/movies-api:${TIMESTAMP}"
    #     )
    #     if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
    #       RELEASE_TAG="${GITHUB_REFrefs/tags/}"
    #       TAG_LIST+=("shaneyboy/movies-api:${RELEASE_TAG}")
    #     fi
    #     echo "tags<<EOF" >> $GITHUB_OUTPUT
    #     for t in "${TAG_LIST[@]}"; do
    #       echo "$t" >> $GITHUB_OUTPUT
    #     done
    #     echo "EOF" >> $GITHUB_OUTPUT
    #     echo "Calculated image tags:"
    #     for t in "${TAG_LIST[@]}"; do
    #       echo "  $t"
    #     done

    # - name: Show tags (debug)
    #   run: |
    #     echo "===== TAGS OUTPUT ====="
    #     echo "Run: ${{ github.run_id }}"
    #     echo "${{ steps.tags.outputs.tags }}"
    #     echo "======================="

    # - name: Log in to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    # - name: Build and push image
    #   id: build                        <-- required so later steps can read steps.build.outputs.digest
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: .
    #     file: Apps/Movies/Movies.API/Dockerfile
    #     push: true
    #     tags: ${{ steps.tags.outputs.tags }}
    #     metadata-file: /tmp/build-metadata.json   optional: provides manifest metadata if you need it

    # - name: Write image info JSON (artifact)
    #   run: |
    #     mkdir -p out
    #     TAGS_JSON=$(echo "${{ steps.tags.outputs.tags }}" | awk 'BEGIN{ORS=""; print "["} {gsub(/^[ \t]+|[ \t]+$/,""); if(NR>1) printf(","); printf("\"%s\"", $0)} END{print "]"}')
    #     DIGEST="${{ steps.build.outputs.digest }}"
    #     fallback: if digest is empty try metadata-file JSON
    #     if [ -z "$DIGEST" ] && [ -f /tmp/build-metadata.json ]; then
    #       DIGEST=$(jq -r '.["containerimage.digest"] // .containerimage?.digest // ""' /tmp/build-metadata.json || true)
    #     fi
    #     cat > out/image-info.json <<EOF
    #     {
    #       "repository": "shaneyboy/movies-api",
    #       "tags": ${TAGS_JSON},
    #       "digest": "$DIGEST",
    #       "pushed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    #     }
    #     EOF
    #     jq . out/image-info.json


    # - name: Upload image-info artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: movies-image-info-${{ github.run_id }}
    #     path: out/image-info.json
    #     retention-days: 7


    # - name: Notify deploy repo (debug curl)
    #   env:
    #     DEPLOY_TOKEN: ${{ secrets.DEPLOY_REPO_TOKEN }}
    #     DEPLOY_REPO: shanieMoonlight/deployment
    #   run: |
    #     set -euo pipefail
    #     CLIENT_PAYLOAD=$(jq -n \
    #       --arg service "movies-api" \
    #       --arg repository "shaneyboy/movies-api" \
    #       --arg digest "${{ steps.build.outputs.digest }}" \
    #       --arg tags "${{ steps.tags.outputs.tags }}" \
    #       --arg commit "${{ github.sha }}" \
    #       --arg run_id "${{ github.run_id }}" \
    #       '{service:$service,repository:$repository,digest:$digest,tags:$tags,commit:$commit,run_id:$run_id}')
    #     FULL_PAYLOAD=$(jq -n --arg cp "$CLIENT_PAYLOAD" '{"event_type":"new-image-movies","client_payload":($cp|fromjson)}')
    #     HTTP_RESPONSE=$(mktemp)
    #     HTTP_STATUS=$(curl -sS -o "$HTTP_RESPONSE" -w "%{http_code}" \
    #       -H "Accept: application/vnd.github.v3+json" \
    #       -H "Authorization: Bearer $DEPLOY_TOKEN" \
    #       -X POST "https://api.github.com/repos/$DEPLOY_REPO/dispatches" \
    #       -d "$FULL_PAYLOAD" || true)
    #     echo "HTTP status: $HTTP_STATUS"
    #     cat "$HTTP_RESPONSE" || true


        