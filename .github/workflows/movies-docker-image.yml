name: Movies - Docker Image CI

on:
  push:
    branches: [ "master" ]
    paths:
      - 'Apps/Movies/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'Apps/Movies/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: shaneyboy/movies-api   # <-- single source of truth

    steps:
    - uses: actions/checkout@v4
  

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Restore solution
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test Movies.Tests/Movies.Tests.csproj --configuration Release --no-build --logger "trx;LogFileName=test_results.trx"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: movies-test-results-${{ github.run_id }}
        path: Movies.Tests/TestResults/**/*.trx
        retention-days: 21

    - name: Publish Movies.API
      run: dotnet publish Apps/Movies/Movies.API/Movies.API.csproj -c Release -o ./out/Apps/Movies/Movies.API --no-build



    - name: Log in to Docker Hub
      id: docker_build
      uses: shanieMoonlight/git-actions/actions/docker-build-push-multiple-tags@master
      with:
        docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
        docker_password: ${{ secrets.DOCKERHUB_TOKEN }}
        image_name: ${{ env.IMAGE_NAME }}
        dockerfile: ./Dockerfile.movies.workflow
        context: .
        push: 'true'


    - name: Show tags (debug)
      run: |
        echo "===== TAGS OUTPUT (from composite action) ====="
        echo "Tags: ${{ steps.docker_build.outputs.tags }}"
        echo "=============================================="




    # - name: Dispatch new-image-movies to deployment repo
    #   env:
    #     DEPLOY_REPO: shanieMoonlight/deployment
    #     DEPLOY_TOKEN: ${{ secrets.DEPLOY_REPO_TOKEN }}
    #     TAGS: ${{ steps.docker_build.outputs.tags }}
    #     DIGEST: ${{ steps.docker_build.outputs.digest }}
    #     EVENT_TYPE: new-image-movies
    #   run: |
    #     PAYLOAD=$(jq -n \
    #       --arg event_type "$EVENT_TYPE" \
    #       --arg service "movies-api" \
    #       --arg repository "${{ env.IMAGE_NAME }}" \
    #       --arg tags "$TAGS" \
    #       --arg digest "$DIGEST" \
    #       --arg commit "${{ github.sha }}" \
    #       --arg run_id "${{ github.run_id }}" \
    #       '{event_type:$event_type, client_payload:{service:$service,repository:$repository,tags:$tags,digest:$digest,commit:$commit,run_id:$run_id}}')
    #     curl -sS -X POST \
    #       -H "Accept: application/vnd.github.v3+json" \
    #       -H "Authorization: Bearer ${DEPLOY_TOKEN}" \
    #       -d "$PAYLOAD" \
    #       "https://api.github.com/repos/${DEPLOY_REPO}/dispatches"

    - name: Dispatch new-image-movies to deployment repo
      env:
        DEPLOY_REPO: shanieMoonlight/deployment
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_REPO_TOKEN }}
        TAGS: ${{ steps.docker_build.outputs.tags }}
        DIGEST: ${{ steps.docker_build.outputs.digest }}
        EVENT_TYPE: new-image-movies
      run: |
        # Basic validation: fail early with clear error messages
        if [ -z "${DEPLOY_TOKEN:-}" ]; then
          echo "::error::DEPLOY_TOKEN is empty. Set the secret DEPLOY_REPO_TOKEN and try again."
          exit 1
        fi

        if [ -z "${TAGS:-}" ]; then
          echo "::error::TAGS is empty. Docker build did not return any tags; aborting dispatch."
          exit 1
        fi

        # Build payload (jq ensures JSON safety)
        PAYLOAD=$(jq -n \
          --arg event_type "$EVENT_TYPE" \
          --arg repository "${{ env.IMAGE_NAME }}" \
          --arg tags "$TAGS" \
          --arg digest "$DIGEST" \
          --arg commit "${{ github.sha }}" \
          --arg run_id "${{ github.run_id }}" \
          '{event_type:$event_type, client_payload:{repository:$repository,tags:$tags,digest:$digest,commit:$commit,run_id:$run_id}}')

        # Dispatch to target repository (uses PAT stored in DEPLOY_TOKEN)
        curl -sS -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${DEPLOY_TOKEN}" \
          -d "$PAYLOAD" \
          "https://api.github.com/repos/${DEPLOY_REPO}/dispatches"


